<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
         xmlns:mate="http://mate.asfusion.com/"
         creationComplete="onCreationComplete()">
	<mate:Listener type="{LockControlEvent.CHANGED_LOCK_SETTINGS}" method="lockSettingsChanged" />
  <mx:Script>
    <![CDATA[
		import com.adobe.crypto.SHA1;
		import com.asfusion.mate.events.Dispatcher;
		
		import flash.net.navigateToURL;
		
		import org.bigbluebutton.common.Images;
		import org.bigbluebutton.common.LogUtil;
		import org.bigbluebutton.core.BBB;
		import org.bigbluebutton.core.EventConstants;
		import org.bigbluebutton.core.UsersUtil;
		import org.bigbluebutton.core.events.CoreEvent;
		import org.bigbluebutton.core.events.LockControlEvent;
		import org.bigbluebutton.core.events.VoiceConfEvent;
		import org.bigbluebutton.core.managers.UserManager;
		import org.bigbluebutton.main.model.users.BBBUser;
		import org.bigbluebutton.main.model.users.Conference;
		import org.bigbluebutton.main.model.users.events.KickUserEvent;
		import org.bigbluebutton.main.model.users.events.RaiseHandEvent;
		import org.bigbluebutton.main.model.users.events.RoleChangeEvent;
		import org.bigbluebutton.modules.breakout.business.BreakoutProxy;
		import org.bigbluebutton.modules.chat.model.ChatOptions;
		import org.bigbluebutton.modules.users.model.UsersOptions;
		import org.bigbluebutton.modules.videoconf.model.VideoConfOptions;
		import org.bigbluebutton.util.i18n.ResourceUtil;
			
      public var sharerUserID:String;
	  public var salt:String = "eb7c5c72b730112644db1a12db84267e";//"2d75e011711511fb656d2eadf7a5ff29";
	  public var moderatorPW:String = "prof123";
	  public var attendeePW:String = "student123";
	  public var privateModeratorPW:String = "privateprof123";
	  public var privateAttendeePW:String = "privatestudent123";
		
      [Bindable]
      private var BUTTONS_SIZE:int = 31;
      private var BUTTONS_PADDING:int = 10;
           
      [Bindable]
      private var showButton:Boolean;
		
	  private static const LOG:String = "ControlButtons videoconf - ";
      
	  private function lockSettingsChanged(e:*):void {
		  showControlButtons();
	  }
		
      private function onCreationComplete():void {
        showControlButtons();
        showPrivateChatButton();
		showNextManagerButton();
      }
      
      public function get padding():int {
        return BUTTONS_PADDING;
      }
      
      public function userMuted(muted:Boolean):void {
        if (muted) {
          muteUnmuteBtn.styleName = "videoMutedButtonStyle";
        } else {
          muteUnmuteBtn.styleName = "videoUnmutedButtonStyle";
        }
      }
      
      public function updateControlButtons():void {
        showControlButtons();
      }
      
      private function onKickUserClicked(event:Event):void {
        event.stopImmediatePropagation();
        
        var gd:Dispatcher = new Dispatcher();
        gd.dispatchEvent(new KickUserEvent(sharerUserID)); 
      }
		
	//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		
	  private function onNextManagerClicked(event:Event):void {
			event.stopImmediatePropagation();
			
			var gd:Dispatcher = new Dispatcher();
			
			//gd.dispatchEvent(e);			
			getNextManager();
	  }
		
	  public function getNextManager():void {
		//event.stopImmediatePropagation();
			
		//var gd:Dispatcher = new Dispatcher();
		
		trace("###############InternalMeetingID - " + UsersUtil.getInternalMeetingID());
		trace("###############ExternalMeetingID - " + UsersUtil.getExternalMeetingID());
		  
		var urlParametersRequest:String = "/bigbluebutton/api/getMeetings?checksum=";
		var urlParameters:String = "getMeetings" + salt;		  
		var checksum:String = SHA1.hash(urlParameters);
		urlParametersRequest = urlParametersRequest+checksum;
		
		var request:URLRequest = new URLRequest(urlParametersRequest);
		
		request.method = URLRequestMethod.GET;		
		
		var urlLoader:URLLoader;
		
		urlLoader = new URLLoader();
		urlLoader.addEventListener(Event.COMPLETE, handleComplete);	
		urlLoader.load(request);	
	  }
		
		private function handleComplete(e:Event):void{
			var xml:XML = new XML(e.target.data);
			LogUtil.debug("load URL complete: " + xml);
			
			var returncode:String = xml.returncode;
			LogUtil.debug("return code: " + returncode);
			if (returncode != 'SUCCESS') {
				LogUtil.debug("failed to load any dynamic info to add to the UI");
				return;
			}
			
			var currentMeetingID:String = UsersUtil.getExternalMeetingID();
			var currentMeetingTime:String;
			
			var meetings:XMLList = xml.meetings.children();
			var meetingsMap:Object = new Object();
			var times:Array = new Array();
			//var booleanModeratorPW:Boolean;
			for each(var meetingXML:XML in meetings) {
			//	if (meetingXML.moderatorPW!=privateModeratorPW){
			//		
			//	}
				trace ("~~Before If~~~~ID - " + meetingXML.meetingID + "   passwd - " + meetingXML.moderatorPW + "    moderatorPW=privateModeratorPW " + (meetingXML.moderatorPW!=privateModeratorPW));
				if(meetingXML.running=="true" && meetingXML.moderatorPW!=privateModeratorPW){
					trace ("~~After If ~~~~ID - " + meetingXML.meetingID + "   passwd - " + meetingXML.moderatorPW + "    moderatorPW=privateModeratorPW " + (meetingXML.moderatorPW!=privateModeratorPW));
					var meetingID:String = meetingXML.meetingID;
					var createTime:String = meetingXML.createTime;
					meetingsMap[createTime]=meetingID;
					times.push(createTime);
					if(meetingID==currentMeetingID){
						currentMeetingTime = createTime;
					}
				}
			}
			times.sort();
			
			var indexList:int = 0;
			
			indexList=times.indexOf(currentMeetingTime);
			
			if (indexList==-1||indexList==(times.length-1)){
				indexList = 0;				
			} else{
				indexList = indexList + 1;
			}
			//trace(LOG + "meetingid: "+currentMeetingID+"   time "+currentMeetingTime + "    array " + times + "   indexList " + indexList + "   MeetingID" + meetingsMap[times[indexList]] + "   meetingsMap" + meetingsMap);
			var nextManager:String = meetingsMap[times[indexList]];
			redirectToNextManager(nextManager);
			
		}
		
		private function redirectToNextManager(nextManager:String):void {
			var  me:String = UsersUtil.getMyUsername();
			var urlParametersRequest:String = "/bigbluebutton/api/join?meetingID=" + nextManager + "&fullName=" + me + "&password=" + attendeePW + "&checksum=";
			var urlParameters:String = "joinmeetingID=" + nextManager + "&fullName=" + me + "&password=" + attendeePW + salt;
			
			var checksum:String = SHA1.hash(urlParameters);
			urlParametersRequest = urlParametersRequest+checksum;
			
			var request:URLRequest = new URLRequest(urlParametersRequest);
			//trace(LOG + "Logging out to: ");
			navigateToURL(request, '_self'); 
			
		}	 
      
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------
		//------------------------------------------------------------------------------------------------------	
	  
		public function goToPrivateChat(createMeetingID:String):void {
			var  me:String = UsersUtil.getMyUsername();
			//var currentMeetingID:String = UsersUtil.getExternalMeetingID();
			//var createMeetingID:String = currentMeetingID + "PrivateChat" + Math.round(Math.random()*1000);
			
			//Create meeting with private chat
			var paramName:String = "name=" + createMeetingID;
			var paramMetengID:String = "&meetingID=" + createMeetingID;				
			var paramWelcome:String = "&welcome=Welcome"//+ "Вы вошли в приватный чат.";
			var paramAttendeePW:String = "&attendeePW=" + privateAttendeePW;
			var paramModeratorPW:String = "&moderatorPW=" + privateModeratorPW;
			var paramVoiceBridge:String = "&voiceBridge="+(70000+Math.round(Math.random()*1000)); 
			var paramLogoutURL:String = "&logoutURL=/"
							
			var urlParametersCreateMeeting:String = "/bigbluebutton/api/create?" + paramName + paramMetengID + paramWelcome + paramAttendeePW + paramModeratorPW + paramVoiceBridge + paramLogoutURL + "&checksum=";
			var urlParametersCreateMeetingSalt:String = "create" + paramName + paramMetengID + paramWelcome + paramAttendeePW + paramModeratorPW + paramVoiceBridge + paramLogoutURL + salt;
			
			var checksum:String = SHA1.hash(urlParametersCreateMeetingSalt);
			urlParametersCreateMeeting = urlParametersCreateMeeting+checksum;
			trace("Create private chat: " + urlParametersCreateMeeting);	
			
			var request:URLRequest = new URLRequest(urlParametersCreateMeeting);
			request.method = URLRequestMethod.GET;		
							
			var urlLoader:URLLoader;
			
			var handler:Function = function(event:Event):void { joinPrivateChatModerator(event, createMeetingID); };
			
			urlLoader = new URLLoader();
			urlLoader.addEventListener(Event.COMPLETE, handler);	
			urlLoader.load(request);
				
		}
		private function joinPrivateChatModerator(e:Event, createMeetingID:String):void{
			var xml:XML = new XML(e.target.data);
			LogUtil.debug("load URL complete: " + xml);
			
			var returncode:String = xml.returncode;
			LogUtil.debug("return code: " + returncode);
			if (returncode != 'SUCCESS') {
				LogUtil.debug("failed to load any dynamic info to add to the UI");
				return;
			}
			
			//removeEventListener(Event.COMPLETE, handler);
			
			var  me:String = UsersUtil.getMyUsername();
			//var currentMeetingID:String = UsersUtil.getExternalMeetingID();
			//var createMeetingID:String = currentMeetingID + "PrivateChat";
			
			//Join to meeting with private chat
			var urlParametersRequest:String = "/bigbluebutton/api/join?meetingID=" + createMeetingID + "&fullName=" + me + "&password=" + privateModeratorPW + "&checksum=";
			var urlParameters:String = "joinmeetingID=" + createMeetingID + "&fullName=" + me + "&password=" + privateModeratorPW + salt;
							
			var checksum:String = SHA1.hash(urlParameters);
			urlParametersRequest = urlParametersRequest+checksum;
			
			var request:URLRequest = new URLRequest(urlParametersRequest);
			//trace(LOG + "Moderator Go to private chat. ");
			navigateToURL(request, '_self'); 
			
		}
		
		public function joinPrivateChatViewer(createMeetingID:String):void{
				//event:TimerEvent, 
			var  me:String = UsersUtil.getMyUsername();
			//var currentMeetingID:String = UsersUtil.getExternalMeetingID();
			//var createMeetingID:String = currentMeetingID + "PrivateChat";
			
			var urlParametersRequest:String = "/bigbluebutton/api/join?meetingID=" + createMeetingID + "&fullName=" + me + "&password=" + privateAttendeePW + "&checksum=";
			var urlParameters:String = "joinmeetingID=" + createMeetingID + "&fullName=" + me + "&password=" + privateAttendeePW + salt;			
			
			var checksum:String = SHA1.hash(urlParameters);
			urlParametersRequest = urlParametersRequest+checksum;
			
			var request:URLRequest = new URLRequest(urlParametersRequest);
			//trace(LOG + "Viewer Go to private chat. ");
			navigateToURL(request, '_self'); 
			
		}
		
		
		
      private function onPrivateChatClicked(event:Event):void {
        event.stopImmediatePropagation();
        
		var eventChat:CoreEvent = new CoreEvent(EventConstants.START_PRIVATE_CHAT);
		eventChat.message.chatWith = sharerUserID;
		var gd:Dispatcher = new Dispatcher();
		gd.dispatchEvent(eventChat);
        //var e:CoreEvent = new CoreEvent(EventConstants.START_PRIVATE_CHAT);
        //e.message.chatWith = sharerUserID;
		var e:RaiseHandEvent = new RaiseHandEvent(RaiseHandEvent.RAISE_HAND);
		if (UserManager.getInstance().getConference().isMyHandRaised) {
			e.raised = false;
			//raiseHandBtn.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.raiseHandBtn.toolTip2');
		} else {
			e.raised = true;
			//var gd:Dispatcher = new Dispatcher();
			gd.dispatchEvent(e);
			//raiseHandBtn.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.raiseHandBtn.toolTip');
		}
		
      }
		
		/*private function requestPrivateChat():void{
			var e:RaiseHandEvent = new RaiseHandEvent(RaiseHandEvent.RAISE_HAND);
			if (UserManager.getInstance().getConference().isMyHandRaised) {
				e.raised = false;
				//raiseHandBtn.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.raiseHandBtn.toolTip2');
			} else {
				e.raised = true;
				//raiseHandBtn.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.raiseHandBtn.toolTip');
			}
			dispatchEvent(e);
		}	*/
      
      private function onSwitchPresenterClicked(event:Event):void {
        event.stopImmediatePropagation();
        
        var e:RoleChangeEvent = new RoleChangeEvent(RoleChangeEvent.ASSIGN_PRESENTER);
        e.userid = sharerUserID;
        e.username = UsersUtil.getUserName(sharerUserID);
        var gd:Dispatcher = new Dispatcher();
        gd.dispatchEvent(e);     
      }
      
      private function onMuteUnmuteClicked(event:Event):void {
        event.stopImmediatePropagation();
        
        var bu:BBBUser = UsersUtil.getUser(sharerUserID);
        if (bu != null) {
          var e:VoiceConfEvent = new VoiceConfEvent(VoiceConfEvent.MUTE_USER);        
          e.userid = bu.userID;
          e.mute = ! bu.voiceMuted; 
          var gd:Dispatcher = new Dispatcher();
          gd.dispatchEvent(e);          
        }
      }
      
		private function showControlButtons():void {
			var vidOptions:VideoConfOptions = new VideoConfOptions();
			
      displaySwitchPresenterButton(vidOptions.controlsForPresenter);
      displayMuteButton(vidOptions.controlsForPresenter);
      displayEjectButton(vidOptions.controlsForPresenter);
		}
      
    private function displayEjectButton(controlsForPresenter:Boolean):void {
			var userOption:UsersOptions = new UsersOptions();
			if (! userOption.allowKickUser) {
				trace("Kicking user not allowed");
				// User kicking not enabled. Just return;
				ejectUserBtn.visible = false;
				return;
			}
			
			trace("Kicking user allowed [" + userOption.allowKickUser + "]");
			
      /**
       * Display button if:
       * 1. If I am moderator and this window is not me.
       * 2. If I am the presenter and display controls for presenter and this window is not me.
       */
      if (ejectUserBtn != null) {
        if (UsersUtil.amIModerator() && ! UsersUtil.isMe(sharerUserID)) {
          ejectUserBtn.visible = false;//true;
          ejectUserBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.ejectUserBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]); 
          return;
        }
        
        if (controlsForPresenter && UsersUtil.amIPresenter() && ! UsersUtil.isMe(sharerUserID)) { /** 2 **/
          ejectUserBtn.visible = false;//true;
          ejectUserBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.ejectUserBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]); 
          return;
        }
        
        ejectUserBtn.visible = false;
      }
    }
    
    private function displaySwitchPresenterButton(controlsForPresenter:Boolean):void {
      /**
       * Display button if:
       * 1. If I am moderator and this user is NOT presenter.
       * 2. If I am the presenter and display controls for presenter and this window is not me.
       */
      if (switchPresenter != null) {
        if (UsersUtil.amIModerator() && (sharerUserID != UsersUtil.getPresenterUserID())) { /** 1. **/ 
          switchPresenter.visible = false;//true;
          switchPresenter.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.switchPresenter.toolTip', [UsersUtil.getUserName(sharerUserID)]);
          return;
        }
    
        if (controlsForPresenter && UsersUtil.amIPresenter() && ! UsersUtil.isMe(sharerUserID)) { /** 2 **/
          switchPresenter.visible = false;//true;
          switchPresenter.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.switchPresenter.toolTip', [UsersUtil.getUserName(sharerUserID)]);  
          return;
        }
        
        switchPresenter.visible = false;
      }
    }
	
	private function displayMuteButton(controlsForPresenter:Boolean):void {
		/**
		 * Display button if user is joined to voice and:
		 * 1. I am moderator or presenter and display controls for presenter and user is not locked with mic disabled due to lock
		 * 2. if this window is me and my mic is not disabled due to lock
		 * */
		if (muteUnmuteBtn != null) {
			if (UsersUtil.isUserJoinedToVoice(sharerUserID)) {
				var isMe:Boolean = UsersUtil.isMe(sharerUserID);
				var userManager:UserManager = UserManager.getInstance();
				var conference:Conference = userManager.getConference();
				var me:BBBUser = conference.getMyUser();
				
        var allowMuteUnmuteButton:Boolean = false;
        if (isMe && !me.disableMyMic) {
          allowMuteUnmuteButton = true;
        } else if (UsersUtil.amIModerator() || (controlsForPresenter && UsersUtil.amIPresenter()) ) {
          allowMuteUnmuteButton = true;
          
          var thisUser:BBBUser = UsersUtil.getUser(sharerUserID);
          if (thisUser.userLocked && conference.getLockSettings().getDisableMic()) {
            allowMuteUnmuteButton = false;
          }
        }
        
        if (allowMuteUnmuteButton) {
          muteUnmuteBtn.visible = true;
          muteUnmuteBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.muteButton.toolTip', [UsersUtil.getUserName(sharerUserID)]);
        } else {
          muteUnmuteBtn.visible = false;
			  }
		  }
    }
  }
		
	private function showPrivateChatButton():void {
        // the first check is to see if the chat module is in the config.xml
		var meetingID:String=UsersUtil.getExternalMeetingID();
		if (! UsersUtil.isMe(sharerUserID) && meetingID.slice(-11,meetingID.length) != "PrivateChat") {
          privateChatBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.privateChatBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]);
          privateChatBtn.visible = true;
        } else {
          privateChatBtn.visible = false;
          privateChatBtn.includeInLayout = false;
        }
      }
		
		private function showNextManagerButton():void {
			// the first check is to see if the chat module is in the config.xml
			var meetingID:String=UsersUtil.getExternalMeetingID();
			if (! UsersUtil.isMe(sharerUserID) && meetingID.slice(-11,meetingID.length) != "PrivateChat") {
				nextManagerBtn.toolTip = ResourceUtil.getInstance().getString('bbb.video.controls.nextManagerBtn.toolTip', [UsersUtil.getUserName(sharerUserID)]);
				nextManagerBtn.visible = true;
			} else {
				nextManagerBtn.visible = false;
				
			}
		}
    ]]>
  </mx:Script>
  <mx:Button id="muteUnmuteBtn" visible="false" click="onMuteUnmuteClicked(event)"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoUnmutedButtonStyle"/>
  <mx:Button id="switchPresenter" visible="false" click="onSwitchPresenterClicked(event)"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoSwitchPresenterButtonStyle" paddingTop="2"/>
  <mx:Button id="ejectUserBtn" visible="false" click="onKickUserClicked(event)"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoEjectUserButtonStyle" paddingTop="2"/>
  <mx:Button id="privateChatBtn" click="onPrivateChatClicked(event)"
             width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoPrivateChatButtonStyle" paddingTop="2"/>
  <mx:Button id="nextManagerBtn" click="onNextManagerClicked(event)"
			 width="{BUTTONS_SIZE}" height="{BUTTONS_SIZE}" styleName="videoSwitchPresenterButtonStyle" paddingTop="2"/>
</mx:HBox>
